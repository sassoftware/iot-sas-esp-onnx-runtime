#!/usr/bin/env python
# encoding: utf-8
#Copyright Â© 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.
#SPDX-License-Identifier: Apache-2.0

onnx_model = "SAS-Tiny-Yolov2.onnx"
onnx_input = "input1"
onnx_output = "convo.9"
#TensorRT might require a Shape Inference to original model
#Visit this link for further information https://github.com/microsoft/onnxruntime/blob/master/docs/execution_providers/TensorRT-ExecutionProvider.md#shape-inference-for-tensorrt-subgraphs
#Below parameters only work for TensorrtExecutionProvider, if not set onnx_model will be used
onnx_model_infer = None
#Model Type 
#  Object_Detection
#  Open_Pose
onnx_model_type = "Object_Detection"

#Input Parameters
inputs_parameters= {#Declare all input of the model, in the expected order.
                    #Supporte Type
                    # Image
                    # Shape
                    "inputs_list": ('Image',''),
                    #Image Size width, height
                    "input_image_size" : (416,416),
                    #Image Normalization Type. 
					#Should be an ordered list to eable muliple actions eg. ['MeanVect','ZeroOne'] or None.
					#The order of the list determin the execution order of commands
                    # None
                    # ['ZeroOne']
                    #   Each Image color is represented by a number from 0 to 255,
                    #   Set this variable to True will divide each color by 255 to bring the range from 0.00 to 1.00
                    # ['MeanVect']
                    #   Standardize the image by subtracting a mean vector                  
                    "image_norm" : ['ZeroOne'],
                    #Mean Vector (only used with Image Normalization Type MeanVect
                    "mean_vec" : None,
                    #color encode type
                    # RGB
                    # BRG
                    "image_color_encode" : 'RGB',
                    #image encode type
                    # NHWC
                    # NCHW
                    #    N: number of images in the batch
                    #    H: height of the image
                    #    W: width of the image
                    #    C: number of channels of the image (ex: 3 for RGB, 1 for grayscale...)
                    "image_encode" : 'NCHW',
                    #Resize Type (as required by model for input)
                    # Stretch (aspect ratio loss)
                    # Letterbox (add black stripes to avoid aspect ratio loss)
                    "input_resize_type" : ['Stretch'],
                    #Pad image to be divisible by a number
                    # None - No pad
                    # Value e.g. 32 - should be a power of 2
                    "image_pad": None,
                    #Add a dimension to the output e.g. from (3,416,416) to (1,3,416,416)
                    "expand_dims": True,
                    #Crop image to ensure that size are divisible by stride value
                    "stride": None
                    }

#Output Parameters
output_decoder="Yolov2_decoder.py"
output_decoder_parameters={"detection_threshold" : 0.4,
                           "boxPerCell" :  5,
                           "classes" : 313,
                           "anchors" : [9.778984, 5.595484, 2.98513, 3.924927, 11.580547, 11.534526, 5.183913, 8.863515, 1.09074, 1.433951]}
#Coordinate Type
# Top left rectangle (rect): rect specifies a bounding box by using the x and y coordinates of its top left corner along with width and height values 
# Centered rectangle (yolo): yolo specifies a bounding box by using the x and y coordinates of its center along with width and height values
# Minimum/Maximum rectangle (coco): coco specifies a bounding box by using the x-min and y-min coordinates of its top left corner along with x-max and y-max coordinates of its bottom right corner
output_coord_type="yolo"
#Additional information needed to draw results
output_data = {"color_palette": [(31, 119, 180), (255, 127, 14),
                         (127, 127, 127), (188, 189, 34),
                         (148, 103, 189), (140, 86, 75),
                         (227, 119, 194), (44, 160, 44),
                         (214, 39, 40), (23, 190, 207)]
}
output_labels = ['Accordion',
'Airplane',
'Animal',
'Ant',
'Antelope',
'Apple',
'Backpack',
'Baked goods',
'Ball',
'Balloon',
'Banana',
'Barrel',
'Bat',
'Bathroom accessory',
'Bed',
'Beer',
'Bell pepper',
'Bench',
'Bicycle',
'Billboard',
'Billiard table',
'Bird',
'Boat',
'Book',
'Bookcase',
'Boot',
'Bottle',
'Box',
'Brassiere',
'Bread',
'Broccoli',
'Bronze sculpture',
'Brown bear',
'Bull',
'Bus',
'Bust',
'Butterfly',
'Cabinet',
'Cabinetry',
'Cake',
'Camera',
'Candle',
'Candy',
'Cannon',
'Canoe',
'Carrot',
'Cart',
'Castle',
'Cat',
'Caterpillar',
'Cattle',
'Cello',
'Cheese',
'Cheetah',
'Chest of drawers',
'Chicken',
'Chopsticks',
'Clock',
'Closet',
'Coat',
'Cocktail',
'Coconut',
'Coffee',
'Coin',
'Computer keyboard',
'Computer monitor',
'Computer mouse',
'Convenience store',
'Cosmetics',
'Couch',
'Countertop',
'Crab',
'Crocodile',
'Cucumber',
'Curtain',
'Dairy',
'Deer',
'Dessert',
'Dice',
'Dinosaur',
'Dog',
'Doll',
'Dolphin',
'Door',
'Door handle',
'Doughnut',
'Dragonfly',
'Drawer',
'Dress',
'Drink',
'Drum',
'Duck',
'Eagle',
'Egg',
'Elephant',
'Falcon',
'Fan',
'Fashion accessory',
'Fast food',
'Fedora',
'Fireplace',
'Fish',
'Flag',
'Flower',
'Food',
'Football',
'Fork',
'Fountain',
'Fox',
'French fries',
'Frog',
'Fruit',
'Furniture',
'Giraffe',
'Glasses',
'Glove',
'Goat',
'Goggles',
'Goldfish',
'Grape',
'Grapefruit',
'Guitar',
'Hamburger',
'Hamster',
'Handbag',
'Hat',
'Headphones',
'Helicopter',
'Helmet',
'Hiking equipment',
'Hippopotamus',
'Home appliance',
'Horn',
'Horse',
'House',
'Ice cream',
'Insect',
'Invertebrate',
'Ipod',
'Jaguar',
'Jellyfish',
'Jewelry',
'Jug',
'Juice',
'Kangaroo',
'Kettle',
'Kitchen appliance',
'Kite',
'Knife',
'Ladder',
'Lamp',
'Lantern',
'Laptop',
'Lemon',
'Leopard',
'License Plate',
'Lifejacket',
'Light bulb',
'Lighthouse',
'Lion',
'Lipstick',
'Lizard',
'Lobster',
'Luggage and bags',
'Maple',
'Medical equipment',
'Microphone',
'Mirror',
'Missile',
'Mixing bowl',
'Mobile phone',
'Monkey',
'Moths and butterflies',
'Motorcycle',
'Mouse',
'Mug',
'Mule',
'Mushroom',
'Musical instrument',
'Nightstand',
'Office building',
'Office supplies',
'Orange',
'Ostrich',
'Otter',
'Oven',
'Owl',
'Oyster',
'Paddle',
'Pancake',
'Panda',
'Parachute',
'Pasta',
'Pastry',
'Peach',
'Pear',
'Pen',
'Penguin',
'Piano',
'Picture frame',
'Pig',
'Pillow',
'Pineapple',
'Pizza',
'Plant',
'Plastic bag',
'Plate',
'Platter',
'Polar bear',
'Porch',
'Poster',
'Pumpkin',
'Rabbit',
'Racket',
'Radish',
'Refrigerator',
'Reptile',
'Rhinoceros',
'Rifle',
'Rocket',
'Roller skates',
'Salad',
'Sandal',
'Saucer',
'Scarf',
'Sculpture',
'Sea lion',
'Segway',
'Shark',
'Sheep',
'Shellfish',
'Shirt',
'Shrimp',
'Sink',
'Skateboard',
'Ski',
'Skirt',
'Skull',
'Skyscraper',
'Snack',
'Snail',
'Snake',
'Snowboard',
'Snowman',
'Sock',
'Spider',
'Spoon',
'Sports equipment',
'Sports uniform',
'Squirrel',
'Stairs',
'Starfish',
'Stool',
'Stove',
'Strawberry',
'Street light',
'Suit',
'Sunflower',
'Surfboard',
'Swim cap',
'Swimming pool',
'Swimwear',
'Table',
'Tablet computer',
'Tableware',
'Tank',
'Tap',
'Tea',
'Teapot',
'Teddy bear',
'Television',
'Tent',
'Tie',
'Tiger',
'Tin can',
'Toilet',
'Tomato',
'Tool',
'Tortoise',
'Tower',
'Toy',
'Traffic light',
'Traffic sign',
'Train',
'Tripod',
'Trousers',
'Turkey',
'Umbrella',
'Vase',
'Vegetable',
'Violin',
'Waffle',
'Waste container',
'Watch',
'Watermelon',
'Weapon',
'Whale',
'Wheelchair',
'Whiteboard',
'Willow',
'Wine',
'Wine glass',
'Wok',
'Zebra',
'Zucchini',
'Vehicle',
'Building',
'Person',
'Window',
'Human face',
'Wheel',
'Tree',
'Chair']